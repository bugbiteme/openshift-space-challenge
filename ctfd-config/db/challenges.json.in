{
  "count": 6,
  "results": [
    {
      "id": 1,
      "name": "Guess a Number!",
      "description": "Guess a number between 1 and 5",
      "max_attempts": 0,
      "value": 4,
      "category": "Level 0 - Warm Up",
      "type": "standard",
      "state": "visible",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 3,
      "name": "Kubernetes version",
      "description": "Log into the OCP console, and find the kubernetes version OpenShift is built on.",
      "max_attempts": 0,
      "value": 4,
      "category": "Level 0 - Warm Up",
      "type": "standard",
      "state": "visible",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 4,
      "name": "Hello World",
      "description": "Your gitea account includes a project called `node-starter`.  Deploy it in your OCP namespace.\r\n\r\nThere is no need to enter a flag.  This challenge will be judged automatically!  \r\n\r\nThe judge must be able to access your service at https://hello-playerX.apps.{{ cluster_url }}/ , where `X` is your player number.   The only correct response is `Hello World`.\r\n\r\n* gitea: https://gitea-gitea.apps.{{ cluster_url }}\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 10,
      "category": "Level 0 - Warm Up",
      "type": "standard",
      "state": "visible",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 5,
      "name": "The French Connection",
      "description": "The service you deployed in the **Hello World** challenge must now say `Bonjour Monde` instead of `Hello World`.\r\n\r\nNo need to enter a flag.  This challenge will be judged automatically!\r\n\r\n* gitea: https://gitea-gitea.apps.{{ cluster_url }}\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 10,
      "category": "Level 0 - Warm Up",
      "type": "standard",
      "state": "visible",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 6,
      "name": "Morse Coding",
      "description": "As night falls on the island, you notice a series of intermittent flashing lights from a distant peak. The patterns seem deliberate, not random. Familiarity strikes - it's Morse code! Amidst the rhythmic pulses, there's a distinct pattern that captures your attention. You believe that within this luminous dance lies a hidden flag, a clue to your next challenge on the island. Your mission: create an API to decipher the beacon's message.\r\n\r\n# Objective:\r\nDevelop an API service that can receive a Morse code message and extract the hidden flag.  A pre-existing ConfigMap in your project called `morse-code` contains a csv file that maps ASCII characters to morse sequences of dots and dashes.\r\n\r\n# Specifications:\r\n**Endpoint:** POST /decode-morse\r\n\r\n**Input:**\r\n\r\nJSON body with a key named message containing the Morse code string.\r\nExample: { \"message\": \"... --- ... -.. . -.-. --- -.. . -.-. .... .- .-.. .-.. . -. --. .\" }\r\n\r\n**Output:**\r\n\r\nThe API should return a JSON response.\r\nIf a flag is detected in the message, the output should be: { \"status\": \"success\", \"flag\": \"[FLAG_TEXT]\" }.\r\nIf no flag is found, the output should be: { \"status\": \"failure\", \"message\": \"No flag detected\" }.\r\n\r\n**Flag Format:**\r\n\r\nThe flag will always be in the format: FLAG{some_text_here}, where some_text_here can be any alphanumeric string. For instance, FLAG{OpenShiftRocks}.\r\nThe Morse code for { is --..--.. and for } is .----.\r\n\r\n**Functional Requirements:**\r\n\r\nThe service should be able to handle standard Morse code symbols: dots (.), dashes (-), spaces between letters, and slashes (/) denoting spaces between words.\r\nThe Morse code message might have noise (unrelated Morse code sequences). The API should focus on extracting the flag pattern and decoding it.\r\nThe API should return an error message for invalid or malformed input: { \"status\": \"error\", \"message\": \"Invalid input\" }.\r\n\r\nThere is no need to enter a flag.  This challenge will be judged automatically!  \r\n\r\nThe judge must be able to access your service at https://hello-playerX.apps.{{ cluster_url }}/ , where `X` is your player number.\r\n\r\n* gitea: https://gitea-gitea.apps.{{ cluster_url }}\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 20,
      "category": "Level 2",
      "type": "standard",
      "state": "visible",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 7,
        "name": "Message in a Bottle",
        "description": "Isolated on a mysterious island, you notice that every so often, bottles drift ashore. These bottles contain notes, some from distant places, others seemingly from nearby. Driven by curiosity and a sense of adventure, you decide to pen down your name and your location on the island. By placing your message in a bottle and casting it into the sea, you hope that someone, somewhere will find it and send their own message back.\r\n\r\n# Objective:\r\nDevelop an API receives floating bottles, extract the message, and send your own message as a reply.  A pre-existing ConfigMap in your project called `location` contains your location.\r\n\r\n# Specifications:\r\n**Endpoint:** POST /float-bottle\r\n\r\n**Input:**\r\n\r\nJSON body with TBD\r\n\r\nThere is no need to enter a flag.  This challenge will be judged automatically!  \r\n\r\nThe judge must be able to access your service at https://hello-playerX.apps.{{ cluster_url }}/ , where `X` is your player number.\r\n\r\n* gitea: https://gitea-gitea.apps.{{ cluster_url }}\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 20,
      "category": "Level 2",
      "type": "standard",
      "state": "visible",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    }
  ],
  "meta": {}
}
