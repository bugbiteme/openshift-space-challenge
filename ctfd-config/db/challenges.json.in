{
  "count": 19,
  "results": [
    {
      "id": 1,
      "name": "Write your name in the sand",
      "description": "Write your name in the sand.  This way, a search plane might see it and know you are there and come rescue you.\r\n\r\n## Objective:\r\nYour current name is PlayerX.   Please change it for your real name and also add your email address.  This will be important to have a chance to win prizes.\r\n\r\n## Specifications:\r\nIn the top right corner, click on \"Settings\"\r\nChange the User Name for your full name:  e.g.  John Smith\r\nChange the Email address:  e.g. jsmith@mycompany.com\r\n\r\nOnce completed, enter \"DONE\" in the flag section and click submit to receive your first point!\r\n",
      "max_attempts": 0,
      "value": 10,
      "category": "Warm Up",
      "type": "standard",
      "state": "visible",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 3,
      "name": "Kubernetes version",
      "description": "Log into the OCP console, and find the kubernetes version OpenShift is built on.\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 10,
      "category": "Warm Up",
      "type": "standard",
      "state": "visible",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 4,
      "name": "Hello World",
      "description": "Your gitea account includes a project called `python-starter`.  Deploy it in your OCP namespace.\r\n\r\nThis will deploy a webserver with the FLAG you must capture!  \r\n\r\nOnce deployed, it should be here: https://hello-playerX.apps.{{ cluster_url }}/ , where `X` is your player number.\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}\r\n* gitea: https://gitea-gitea.apps.{{ cluster_url }}\r\n* starters: https://gitea-gitea.apps.{{ cluster_url }}/starter\r\n",
      "max_attempts": 0,
      "value": 10,
      "category": "Warm Up",
      "type": "standard",
      "state": "visible",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 5,
      "name": "The French Connection",
      "description": "Now let's learn how to modify our code to return the French version of this FLAG.     The base64 version of our FLAG is:\r\nRkxBR19CT05KT1VSXzk5\r\n\r\nYou have to decrypt this base64 variable and return your flag in your webservice to get it.      Here is the code you will need.   Modify the \"hello\" function with this code:\r\n\r\nimport base64\r\n\r\nbase64_string = \"RkxBR19CT05KT1VSXzk5\"\r\n\r\nflag = base64.b64decode(base64_string).decode('utf-8')\r\n\r\nreturn FLAG\r\n\r\nThen restart your container to see the result.\r\n\r\n* gitea: https://gitea-gitea.apps.{{ cluster_url }}\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 10,
      "category": "Warm Up",
      "type": "standard",
      "state": "hidden",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 6,
      "name": "Morse Coding",
      "description": "As night falls on the island, you notice a series of intermittent flashing lights from a distant peak. The patterns seem deliberate, not random. Familiarity strikes - it's Morse code! Amidst the rhythmic pulses, there's a distinct pattern that captures your attention. You believe that within this luminous dance lies a hidden flag, a clue to your next challenge on the island. Your mission: create an API to decipher the beacon's message and find the hidden flag code.\r\n\r\n# Objective:\r\nDevelop an API service that can receive a Morse code message and extract the hidden flag.  Not all messages will contain the flag.  A pre-existing ConfigMap in your project called `morse-code` contains a csv file that maps ASCII characters to morse sequences of dots and dashes.\r\n\r\n# Specifications:\r\n**Endpoint:** POST /decode-morse\r\n\r\n**Input:**\r\n\r\nJSON body with a key named message containing the Morse code string.\r\nExample: { \"message\": \"... --- ... -.. . -.-. --- -.. . -.-. .... .- .-.. .-.. . -. --. .\" }\r\n\r\n**Functional Requirements:**\r\n\r\nThe service should be able to handle standard Morse code symbols: dots (.), dashes (-), spaces between letters, and slashes (/) denoting spaces between words.\r\nThe API should focus on extracting the flag pattern and decoding it.\r\nSubmit the flag below once you've received the flag message!\r\n\r\nThe morse code sender must be able to access your service at https://morse-playerX.apps.{{ cluster_url }}/decode-morse, where `X` is your player number.\r\n\r\n* gitea: https://gitea-gitea.apps.{{ cluster_url }}\r\n* starters: https://gitea-gitea.apps.{{ cluster_url }}/starter\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 100,
      "category": "Island APIs",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 7,
      "name": "Message in a Bottle",
      "description": "During your lonely walks along the island's beaches, you discover bottles frequently washing ashore, each carrying a cryptic message. Inside each bottle, you find not only a character but also a set of coordinates. An idea dawns upon you: by placing each character at its designated spot on a grid, a coherent message might just come into view. It's clear that these bottles aren't mere oceanic debris; they are signposts, possibly guiding you towards rescue or unraveling the island's mysteries. Your mission, should you accept: Retrieve these bottled messages, meticulously mark each character on the grid, and unveil the concealed message.\r\n\r\n# Objective:\r\nDevelop an API that receives floating bottles, extract the character and position information, and then render the message to reveal the hidden flag.\r\n\r\n# Specifications:\r\n**Endpoint:** POST /collect-bottles\r\n\r\n**Input:**\r\n\r\nJSON body containing a list of JSON objects, each containing: \r\n* `character`: A single non-space character in the bottle\r\n* `coordinates`: An object with two properties, `x` and `y`, representing the location on the grid where the character should be placed.\r\n\r\nExample input:\r\n```\r\n[\r\n  {\r\n    \"character\": \"H\",\r\n    \"coordinates\": {\r\n      \"x\": 0,\r\n      \"y\": 1\r\n    }\r\n  },\r\n  {\r\n    \"character\": \"$\",\r\n    \"coordinates\": {\r\n      \"x\": 12,\r\n      \"y\": 5\r\n    }\r\n  }\r\n]\r\n```\r\nNote that you don't know the dimensions of the grid, or the orientation of the message.\r\n\r\nOnce you have the flag text, enter it in the field below.\r\n\r\nYou will receive bottles at `https://bottles-playerX.apps.{{ cluster_url }}/collect-bottles`, where `X` is your player number.\r\n\r\n* gitea: https://gitea-gitea.apps.{{ cluster_url }}\r\n* starters: https://gitea-gitea.apps.{{ cluster_url }}/starter\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 125,
      "category": "Island APIs",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 8,
      "name": "Native Java",
      "description": "Log in the OpenShift console using your username/password.\r\n\r\nIn the top/left, make sure you are in the \"Developer\" view.    In this view, your first option in the left menu is \"+Add\".    This page helps you quickly build services from different sources.\r\n\r\nUnder \"Getting started resources\", you'll find a \"Create applications using samples\" section.  What language come first as the best way to run Kubernetes-native Java with low memory footprint and fast boot times for microservices and serverless applications.\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 10,
      "category": "Treasure Hunts",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 10,
      "name": "Monkey Business",
      "description": "Help! The island is crawling with chaos monkeys!  Ensure your \"hello\" service is running with multiple replicas for high availability!  You don't want to miss a chance to say Hi on this lonely island.\r\n\r\nNo need to enter a flag.  This challenge will be judged automatically!\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 15,
      "category": "SurvivalOps",
      "type": "standard",
      "state": "hidden",
      "requirements": {
        "prerequisites": [
          17
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 11,
      "name": "Aloha!",
      "description": "While the island appears tropical, there are few other clues to help you identify your location.  Are you in Hawai'i?  Maybe \"aloha\" is the customary greeting on this island.\r\n\r\nAdd a second route to your \"Hello World\" service from the \"Warm Up\" level so that it reachable at https://aloha-playerX.apps.{{ cluster_url }}/\r\n\r\nThe response from the new route will be your flag\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 20,
      "category": "SurvivalOps",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 12,
      "name": "Treasure Map",
      "description": "Jackpot!  There's a treasure map hidden in a ConfigMap!  It's base64 encoded, so be sure to decode it once you find it, and enter it in the box below.\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 15,
      "category": "Treasure Hunts",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 15,
      "name": "Top Explorer",
      "description": "While scouring the island for clues, you stumble upon an unexpected digital relic: the personal logs of past explorers!  They are, of course, stored in a ConfigMap, encrypted in the universal language of... SQL. Before you scoff and toss it aside, consider the knowledge hidden within. These explorers might've unraveled the island's secrets! Look for the `island-logs` ConfigMap, then deploy a postgresql database using one of the database application templates on OpenShift's \"**Add**\" page.\r\n\r\nInterestingly, in addition to the personal logs, the SQL tables also includes skill assessment scores for every explorer across a number of IT survival skills.\r\n\r\nWhat's the name of the explorer with the highest aggregate skills score?\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 40,
      "category": "SurvivalOps",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 16,
      "name": "Journal",
      "description": "It occurs to you that the personal logs of the explorers may provide a clue to escaping the island.  If the explorers left the island, then perhaps their last journal entry would suggest what they did to escape!\r\n\r\nWhat is the final journal entry for the most skilled explorer?\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 20,
      "category": "SurvivalOps",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          15,
          17
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 17,
      "name": "Unlock the island",
      "description": "Wait for the game master to provide a KEY to unlock the rest of the island.  \r\nEnter this key in the flag section and click submit.\r\n\r\n",
      "max_attempts": 0,
      "value": 11,
      "category": "Warm Up",
      "type": "standard",
      "state": "visible",
      "requirements": null,
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 18,
      "name": "Persistence Pays Off",
      "description": "There's a treasure key stored on a  Persistent Volume!\r\n\r\n Your namespace already includes a Persistent Volume Claim called **treasure-key-pvc**.    Mount the volume into a container and access `mykey.txt`.  The text flag you're looking for is in that file.",
      "max_attempts": 0,
      "value": 30,
      "category": "SurvivalOps",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 19,
      "name": "mapster",
      "description": "You come across an old notebook that references the famous peer-to-peer map sharing application **mapster**.    The notes say that mapster is available in a public container registry at `quay.io/atgreen0/mapster:latest`.     \r\n\r\nTry deploying mapster in your namespace.   Once deployed and running, it should connect to the mapster peer network.  \r\n\r\nHow many peers was mapster able to connect to?\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 50,
      "category": "SurvivalOps",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 20,
      "name": "Scrambled Islands",
      "description": "Now that **mapster** is running, you can try to access it.   \r\n\r\nOne of the services mapster provides is island imagery.  Imagery is available through a simple REST API: `/island/X`,  where X is a integer 1 or greater.  \r\n\r\nAs you examine the images, it dawns on you that you are looking at the *Alphabet Island* chain, where islands are all shaped like letters.  \r\nLook at the first four island images, and rearrange them to form a word.\r\n\r\nWhat useful item do the rearranged letters spell?\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 20,
      "category": "Treasure Hunts",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17,
          19
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 21,
      "name": "Island Hopping",
      "description": "The **mapster** peer-to-peer map sharing application you've deployed provides a very useful service: island coordinate sharing.\r\n\r\nThe mapster `/maps` API should return text output where each row represents the X and Y coordinates of an island on a simple grid.   Each grid unit represents one kilometer.\r\n\r\nIf only you could travel from one island to another...  But how far apart are they?   Start your journey by computing the distance (km) between the first two islands on the list.    Round your answer to the nearest kilometer.",
      "max_attempts": 0,
      "value": 40,
      "category": "Island APIs",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17,
          19
        ]
      },
      "connection_info": null,
      "next_id": null
    },
    {
      "id": 22,
      "name": "The Traveling Sailor",
      "description": "Now that you can compute the distance between any two islands, let's do something more ambitious!\r\n\r\nIt would be nice if you could visit every island listed by **mapster**'s `/maps` API, but you'll want to minimize your time at sea.   It's time to calculate the shortest path that visits every island.   The list of islands isn't very long,  so you can probably brute force this!\r\n\r\nYou don't know which island you're starting from, so let's just look for the shortest path starting on any island.  More specifically, check the shortest path starting from each island and visiting every other one.  The answer is the shortest one of those.  Once again, be sure to round your answer to the nearest kilometer.\r\n\r\n* ocp: https://console-openshift-console.apps.{{ cluster_url }}",
      "max_attempts": 0,
      "value": 125,
      "category": "Island APIs",
      "type": "standard",
      "state": "visible",
      "requirements": {
        "prerequisites": [
          17,
          19,
          21
        ]
      },
      "connection_info": null,
      "next_id": null
    }
  ],
  "meta": {}
}
