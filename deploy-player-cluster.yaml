---
- name: Deploy OpenShift Space Challenge Player Cluster
  hosts: localhost
  gather_facts: false
  connection: local
  vars_files:
  - "game-clusters.yaml"
  vars:
    project_name: "ctfd"
    player_count: 400
  tasks:
    - name: create gitea operator
      shell: oc apply -k https://github.com/rhpds/gitea-operator/OLMDeploy

    - name: create gitea namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: gitea
        state: present
        wait: yes
      retries: 20
      delay: 15

    - name: create player accounts
      shell: |
        if [ "$(uname)" = "Darwin" ]; then oc get secret htpasswd -o json -n openshift-config | jq -r '.data.htpasswd' | tr -d ' ' | base64 -D; else oc get secret htpasswd -o json -n openshift-config | jq -r '.data.htpasswd' | tr -d ' ' | base64 -d; fi | grep "admin" > .players.htpasswd
        cat players.htpasswd >> .players.htpasswd
        oc create secret generic htpasswd --from-file=htpasswd=.players.htpasswd -n openshift-config --dry-run=client -o yaml | oc replace -f -

    - name: create player namespaces
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "player{{ item }}"
        state: present
        wait: yes
      with_sequence: start=1 end={{ player_count }}
      retries: 20
      delay: 15

    - name: Assigning players to namespaces
      shell: |
        oc adm policy add-role-to-user edit "player{{ item }}" -n "player{{ item }}"
      with_sequence: start=1 end={{ player_count }}

    - name: Get the cluster console URL
      shell: oc get routes --all-namespaces | grep console-openshift | awk '{ print $3 }'
      register: oc_output

    - name: Extract the cluster domain
      set_fact:
        extracted_domain: "{{ oc_output.stdout.split('apps.')[1] }}"

    - name: Generate gitea custom configmap from template
      template:
        src: gitea_configmap.j2
        dest: /tmp/gitea_configmap.yaml
      vars:
        cluster_domain: "{{ extracted_domain }}"

    - name: Create custom configmap for gitea
      shell: |
        oc apply -f /tmp/gitea_configmap.yaml -n gitea

    - name: create gitea CRD
      kubernetes.core.k8s:
        namespace: gitea
        definition:
          apiVersion: pfe.rhpds.com/v1
          kind: Gitea
          metadata:
            name: gitea
          spec:
            giteaCpuRequest: 4
            giteaCpuLimit: 4
            postgresqlCpuLimit: 2
            postgresqlCpuRequest: 2
            giteaUserNumber: 0
            giteaAdminPasswordLength: 32
            giteaGenerateUserFormat: player%d
            giteaVolumeSize: 4Gi
            giteaAdminUser: gitadmin
            giteaImageTag: 1.22.1
            postgresqlVolumeSize: 4Gi
            giteaDisableRegistration: true
            giteaUserPassword: openshift
            giteaAdminEmail: green@redhat.com
            giteaAdminPassword: redhat123
            giteaCreateUsers: true
            giteaSsl: true
            giteaConfigMapName: custom-gitea-config
            giteaHostname: "gitea-gitea.apps.{{ extracted_domain }}"
            postgresqlSetup: true
            giteaPostgresqlServiceName: postgresql-gitea
            giteaPostgresqlDatabaseName: giteadb
            giteaPostgresqlUser: giteauser
            giteaPostgresqlPassword: giteapassword
      retries: 20
      delay: 15

    - name: create player limitranges
      kubernetes.core.k8s:
        namespace: "player{{ item }}"
        definition:
          apiVersion: v1
          kind: LimitRange
          metadata:
            name: resource-limits
          spec:
            limits:
              - type: Container
                default:
                  cpu: 2
                defaultRequest:
                  cpu: 100m
      with_sequence: start=1 end={{ player_count }}
      retries: 20
      delay: 15

    - name: Wait for gitea pod to be created
      shell: "oc get pod --namespace=gitea --selector app=gitea --output=jsonpath='{.items[*].metadata.name}'"
      register: gitea_pod_created
      until: item in gitea_pod_created.stdout
      retries: 10
      delay: 30
      with_items:
        - gitea

    - name: Wait for gitea to become ready
      shell: "oc wait --namespace=gitea --for=condition=Ready pods --selector app=gitea --timeout=600s"
      register: gitea_pod_created

    - name: set gitea passwords
      shell: |
        PODNAME=$(oc get pods -n gitea --selector app=gitea -o custom-columns=POD:.metadata.name --no-headers)
        oc cp gitea-set-passwords.sh $PODNAME:gitea-set-passwords.sh -n gitea
        oc exec $PODNAME -n gitea -- chmod +x ./gitea-set-passwords.sh
        oc exec $PODNAME -n gitea -- sh -c "./gitea-set-passwords.sh > gitea-set-passwords.log 2>&1"
      ignore_errors: true

    - name: Create starter gitea user
      tags:
        - gitea
      ansible.builtin.uri:
        url: https://gitea-gitea.apps.{{ extracted_domain }}/api/v1/admin/users
        method: POST
        body: "{{ body }}"
        status_code: [200, 201]
        body_format: json
        validate_certs: false
        user: "gitadmin"
        password: "redhat123"
        force_basic_auth: true
      vars:
        body: >-
          {
            "email": "foo@example.com",
            "login_name": "starter",
            "must_change_password": false,
            "password": "redhat123",
            "send_notify": false,
            "username": "starter"
          }
      ignore_errors: true

    - name: Fetch starter user ID from gitea
      tags:
        - gitea
      shell: |
        PODNAME=$(oc get pods -n gitea --selector app=gitea -o custom-columns=POD:.metadata.name --no-headers)
        oc exec $PODNAME -n gitea -- ./gitea --config conf/app.ini admin user list | grep starter | awk '{ print $1 }'
      register: starter_output

    - name: Set starter_id fact
      tags:
        - gitea
      set_fact:
        starter_id: "{{ starter_output.stdout }}"

    - name: Fork starter repos
      tags:
        - gitea
      ansible.builtin.uri:
        url: https://gitea-gitea.apps.{{ extracted_domain }}/api/v1/repos/migrate
        method: POST
        body: "{{ body }}"
        status_code: 201
        body_format: json
        validate_certs: false
        user: "starter"
        password: "redhat123"
        force_basic_auth: true
      vars:
        body: >-
          {
            "clone_addr": "{{ item.url }}",
            "description": "",
            "issues": false,
            "milestones": false,
            "mirror": false,
            "private": false,
            "repo_name": "{{ item.name }}",
            "uid": {{ starter_id }}
          }
      with_items:
        - { url: 'https://github.com/catalyst-ctfd/python-starter.git', name: 'python-starter' }
        - { url: 'https://github.com/catalyst-ctfd/node-starter.git', name: 'node-starter' }
        - { url: 'https://github.com/catalyst-ctfd/springboot-starter.git', name: 'springboot-starter' }
        - { url: 'https://github.com/catalyst-ctfd/quarkus-starter.git', name: 'quarkus-starter' }
        - { url: 'https://github.com/catalyst-ctfd/node-rag-starter.git', name: 'node-rag-starter' }
        - { url: 'https://github.com/catalyst-ctfd/python-rag-starter.git', name: 'python-rag-starter' }
        - { url: 'https://github.com/catalyst-ctfd/python-mysql-starter.git', name: 'python-mysql-starter' }
      ignore_errors: true

    - name: Create INSTRUCTIONS repo in Gitea
      ansible.builtin.uri:
        url: https://gitea-gitea.apps.{{ extracted_domain }}/api/v1/user/repos
        method: POST
        body_format: json
        validate_certs: false
        user: "starter"
        password: "redhat123"
        force_basic_auth: true
        status_code: [200, 201]
        body:
          name: "INSTRUCTIONS"
          description: "Instructions Repository"
          private: false
      register: repo_response
      ignore_errors: true

    - name: Generate README.md from template
      template:
        src: STARTER-README.j2
        dest: /tmp/README.md
      vars:
        player_cluster: "{{ extracted_domain }}"

    - name: Ensure INSTRUCTIONS directory is absent
      ansible.builtin.file:
        path: /tmp/INSTRUCTIONS
        state: absent

    - name: Ensure INSTRUCTIONS directory is present
      ansible.builtin.file:
        path: /tmp/INSTRUCTIONS
        state: directory

    - name: Move README.md to INSTRUCTIONS directory
      ansible.builtin.copy:
        src: '/tmp/README.md'
        dest: '/tmp/INSTRUCTIONS/README.md'
        remote_src: yes

    - name: Move images to INSTRUCTIONS repo
      ansible.builtin.copy:
        src: 'images'
        dest: '/tmp/INSTRUCTIONS/'
        remote_src: yes

    - name: Move resources to INSTRUCTIONS repo
      ansible.builtin.copy:
        src: 'resources'
        dest: '/tmp/INSTRUCTIONS/'
        remote_src: yes

    - name: Add, commit, and push README.md
      shell: |
        git init
        git add README.md images resources
        git commit -m "New files"
        git remote add origin "https://starter:redhat123@gitea-gitea.apps.{{ extracted_domain }}/starter/INSTRUCTIONS.git"
        git push --set-upstream origin master
      args:
        chdir: "/tmp/INSTRUCTIONS"
      environment:
        GIT_COMMITTER_NAME: "starter"
        GIT_COMMITTER_EMAIL: "starter@example.com"
        GIT_AUTHOR_NAME: "starter"
        GIT_AUTHOR_EMAIL: "starter@example.com"
      ignore_errors: true

    - name: Disable project creation for players
      shell: |
        oc patch clusterrolebinding.rbac self-provisioners -p '{"subjects": null}'
      retries: 20
      delay: 15

    - name: Set the starter gitea user avatar
      shell: |
        curl -X POST https://starter:redhat123@gitea-gitea.apps.{{ extracted_domain }}/api/v1/user/avatar --json @{{ playbook_dir }}/starter-avatar.json

    - name: install web cli operator
      tags:
        - web-terminal
      shell: |
        oc apply -f web-cli-operator/subscription.yaml -n openshift-operators

    - name: Deploy daemonset for image caching
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: game-image-cache
            namespace: default
          spec:
            selector:
              matchLabels:
                app: game-image-cache
            template:
              metadata:
                labels:
                  app: game-image-cache
              spec:
                containers:
                - name: ship
                  image: quay.io/atgreen0/ship_api:latest
                  command: ['sh', '-c', 'while true; do sleep 9000; done']
                - name: planetdb
                  image: quay.io/mberube/planetdb:latest
                  command: ['sh', '-c', 'while true; do sleep 9000; done']
                - name: chroma
                  image: quay.io/atgreen0/chroma:latest
                  command: ['sh', '-c', 'while true; do sleep 9000; done']
                - name: ollama-embedding
                  image: quay.io/atgreen0/ollama-embedding:latest
                  command: ['sh', '-c', 'while true; do sleep 9000; done']
